// Copy these header message to cover input in the target prototxt 
// (from beginning to first conv layer before)
name: "PVANET"
input: "data"
input_dim: 1
input_dim: 3
input_dim: 128
input_dim: 128

// Copy these header message to cover the last layers in the target prototxt 
// (from the last split layer before stretched layer to the end, with the name of "rpn_head_3x3_rpn_head_3x3_relu_0_split")
// the kernel of Pooling layer = the input size of this layer ( for PVENET, it is input_dim / 8)
layer {
	name: "Inner_Product_to_Conv"
	type: "Pooling"
	bottom: "rpn_head_3x3"
	top: "stretched_rpn_head_3x3"
	pooling_param {
		pool: AVE
		kernel_h: 32
		kernel_w: 32
		stride: 1
	}
}

layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_score_g1"
  name: "stretched_rpn_head_1x1_score_g1"
  type: "InnerProduct"
  inner_product_param {
    num_output: 2 # (1 * 2)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_delta_g1"
  name: "stretched_rpn_head_1x1_delta_g1"
  type: "InnerProduct"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4 # (1 * 4)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


#landmarks
layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_landmark_delta_g1"
  name: "stretched_rpn_head_1x1_landmark_delta_g1"
  type: "InnerProduct"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10 # (1 * 10)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}



# -------------------------- RPN-Group2
layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_score_g2"
  name: "stretched_rpn_head_1x1_score_g2"
  type: "InnerProduct"
  inner_product_param {
    num_output: 2 # (1 * 2)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_delta_g2"
  name: "stretched_rpn_head_1x1_delta_g2"
  type: "InnerProduct"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4 # (1 * 4)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


#landmarks
layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_landmark_delta_g2"
  name: "stretched_rpn_head_1x1_landmark_delta_g2"
  type: "InnerProduct"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10 # (1 * 10)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}



# -------------------------- RPN-Group3
layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_score_g3"
  name: "stretched_rpn_head_1x1_score_g3"
  type: "InnerProduct"
  inner_product_param {
    num_output: 2 # (1 * 2)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_delta_g3"
  name: "stretched_rpn_head_1x1_delta_g3"
  type: "InnerProduct"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4 # (1 * 4)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


#landmarks
layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_landmark_delta_g3"
  name: "stretched_rpn_head_1x1_landmark_delta_g3"
  type: "InnerProduct"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10 # (1 * 10)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}



# -------------------------- RPN-Group4
layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_score_g4"
  name: "stretched_rpn_head_1x1_score_g4"
  type: "InnerProduct"
  inner_product_param {
    num_output: 2 # (1 * 2)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_delta_g4"
  name: "stretched_rpn_head_1x1_delta_g4"
  type: "InnerProduct"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4 # (1 * 4)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


#landmarks
layer {
  bottom: "stretched_rpn_head_3x3"
  top: "stretched_rpn_head_1x1_landmark_delta_g4"
  name: "stretched_rpn_head_1x1_landmark_delta_g4"
  type: "InnerProduct"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10 # (1 * 10)
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}